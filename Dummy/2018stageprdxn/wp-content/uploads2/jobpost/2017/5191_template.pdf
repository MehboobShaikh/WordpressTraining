<?php

/**
 * @file
 * template.php
 */
/**
 * Implements hook_preprocess_page().
 */
function bootsass_preprocess_page(&$vars) {
  //Adding links to search page based on tag taxanomy term
  foreach ($vars['page']['content']['system_main']['nodes'] as &$node) {
    $c=0;
    while(isset($node['field_tags'][$c]['#markup'])) {
      $name = $node['field_tags'][$c]['#markup'];
      $link = l($name, drupal_get_path() . "search/" . $name);
      $node['field_tags'][$c]['#markup'] = $link;
      $c++;
    }    
  }
}
/**
 * Implements hook_preprocess_node().
 */
function bootsass_preprocess_node(&$vars) {
  $content = &$vars['content'];

  if (!isset($content['field_primary_region'])) {
    $content['field_primary_region'] = NULL;
  }

  if ($vars['type'] == 'analysis') {
    if (!empty($vars['field_report_campaign_id']) && isset($content['field_pdf'])) {
      $alias = drupal_get_path_alias('node/' . $vars['field_white_paper'][0]['target_id']);
      $content['field_pdf'] = '<span><img class="file-icon" src="/modules/file/icons/application-pdf.png"><a href="/' . $alias . '?redirect=TRUE">Download Full Report</a></span>';
    }
  }
}

/**
 * Implements hook_partial__PARTIAL_NAME_preprocess().
 */
function bootsass_partial__analysis_left_menu_preprocess(&$vars) {
  // Get analysis node.
  // If it is a list, the analysis node id will be in the arg().
  if (isset($vars['analysis_list'])
  && $vars['analysis_list']) {
    $analysis_id = arg(1);
  }
  else {
    $analysis_id = $vars['analysis_id'];
  }
  $node = node_load($analysis_id);
  $node_title = $node->title;
  $node = node_view($node);

  if (isset($node['field_partner_copy'])) {
    $partner_copy = $node['field_partner_copy']['#items'][0]['value'];
  }

  $field_names = array(
    'White Paper' => 'white_paper',
    'Infographic' => 'infographic',
    'Video' => 'video',
    'Blog Post' => 'blog',
    'Article' => 'article',
    'Case Study' => 'case_study',
    $partner_copy => 'partner',
  );
  $node_type = $vars['node_type'];
  $reference_fields = array();
  $reference_fields[] = array(
    'data' => l(t('Summary'), drupal_get_path_alias('node/' . $analysis_id)),
    'class' => (isset($node_type) && $node_type == 'analysis') ? 'active' : 'not-active',
  );

  foreach ($field_names as $name => $entry) {
    if (isset($node['field_' . $entry])) {
      $content = $node['field_' . $entry];
      $class = 'not-active';
      if (isset($node_type) && $node_type == substr($content['#field_name'], 6)) {
        $class = 'active';
      }

      if ($content['#field_type'] == 'taxonomy_term_reference') {
        $name = format_plural(count_removing_duplicates($content['#items']), $name, $name . 's');
        $reference_fields[] = array(
          'data' => l($name, drupal_get_path_alias('node/' . $analysis_id . '/' . 'sponsors')),
          'class' => $class,
        );
      }
      elseif (count_removing_duplicates($content['#items']) == 1) {
        $reference_fields[] = array(
          'data' => l($name, 'node/' . $content['#items'][0]['target_id']),
          'class' => $class,
        );
      }
      else {
        if ($entry == 'case_study') {
          $name = 'Case Studies';
          $reference_fields[] = array(
            'data' => l($name, drupal_get_path_alias('node/' . $analysis_id) . '/case-studies'),
            'class' => $class,
          );
        }
        else {
          $link = drupal_get_path_alias('node/' . $analysis_id);
          $link .= '/' . str_replace('_', '-', substr($content['#field_name'], 6)) . 's';
          $reference_fields[] = array(
            'data' => l($name . 's', $link),
            'class' => $class,
          );
        }
      }
    }
  }
  foreach ($reference_fields as $key => $field) {
    if ($node_title == 'The Illicit Trade Environment Index' && strpos($field['data'], 'White Paper') !== FALSE) {
      $reference_fields[$key]['data'] = str_replace('White Paper', 'Excel Workbook', $reference_fields[$key]['data']);
    }
    if ($node_title == 'Global resource challenges: Risks and opportunities for strategic management' && strpos($field['data'], 'Infographic') !== FALSE) {
      $reference_fields[$key]['data'] = str_replace('Infographic', 'Excel Workbook', $reference_fields[$key]['data']);
    }
    if ($node_title == 'The year in crisis: 2016' && strpos($field['data'], 'Case Studies') !== FALSE) {
      $reference_fields[$key]['data'] = str_replace('Case Studies', 'Market Reports', $reference_fields[$key]['data']);
    }
  }
  $vars['menu_itens'] = $reference_fields;
}

/**
 * Returns HTML for a form element label and required marker.
 *
 * Form element labels include the #title and a #required marker. The label is
 * associated with the element itself by the element #id. Labels may appear
 * before or after elements, depending on theme_form_element() and
 * #title_display.
 *
 * This function will not be called for elements with no labels, depending on
 * #title_display. For elements that have an empty #title and are not required,
 * this function will output no label (''). For required elements that have an
 * empty #title, this will output the required marker alone within the label.
 * The label will use the #id to associate the marker with the field that is
 * required. That is especially important for screenreader users to know
 * which field is required.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #required, #title, #id, #value, #description.
 *
 * @return string
 *   The constructed HTML.
 *
 * @see theme_form_element_label()
 *
 * @ingroup theme_functions
 */
function bootsass_form_element_label(&$variables) {
  $element = $variables['element'];

  // Extract variables.
  $output = '';

  $title = !empty($element['#title']) ? filter_xss_admin($element['#title']) : '';

  // Only show the required marker if there is an actual title to display.
  if ($title && $required = !empty($element['#required']) ? theme('form_required_marker', array('element' => $element)) : '') {
    $title .= ' ' . $required;
  }

  $display = isset($element['#title_display']) ? $element['#title_display'] : 'before';
  $type = !empty($element['#type']) ? $element['#type'] : FALSE;
  $checkbox = $type && $type === 'checkbox';
  $radio = $type && $type === 'radio';

  // Immediately return if the element is not a checkbox or radio and there is
  // no label to be rendered.
  if (!$checkbox && !$radio && ($display === 'none' || !$title)) {
    return '';
  }

  // Retrieve the label attributes array.
  $attributes = &_bootstrap_get_attributes($element, 'label_attributes');

  // Add Bootstrap label class.
  $attributes['class'][] = 'control-label';

  // Add the necessary 'for' attribute if the element ID exists.
  if (!empty($element['#id'])) {
    $attributes['for'] = $element['#id'];
  }

  // Checkboxes and radios must construct the label differently.
  if ($checkbox || $radio) {
    if ($display === 'before') {
      $output .= $title;
    }
    elseif ($display === 'none' || $display === 'invisible') {
      $output .= '<span class="element-invisible">' . $title . '</span>';
    }
    if ($display === 'after') {
      $output .= $title;
    }
  }
  // Otherwise, just render the title as the label.
  else {
    // Show label only to screen readers to avoid disruption in visual flows.
    if ($display === 'invisible') {
      $attributes['class'][] = 'element-invisible';
    }
    $output .= $title;
  }


  // The leading whitespace helps visually separate fields from inline labels.
    $thecheckbox = '';
  if ($checkbox || $radio) {
    // Inject the rendered checkbox or radio element outside the label.
    if (!empty($element['#children'])) {
      $thecheckbox .= $element['#children'];
    }
  }
  return $thecheckbox.' <label' . drupal_attributes($attributes) . '>' . $output . "</label>\n";
}

